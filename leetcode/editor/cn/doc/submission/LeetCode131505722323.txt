class Solution {
public:
    vector<vector<string>> ans;
    vector<string> path;

    void backTrace(const string & s,int startIndex) {
        if(startIndex >= s.size()) {
            ans.push_back(path);
            return;
        }

        for(int i=startIndex;i<s.size();i++) {
            if(isHuiWen(s,startIndex,i)) {
                string str = s.substr(startIndex, i - startIndex + 1);
                path.push_back(str);
            }else {
                continue;
            }
            // 回溯
            backTrace(s,i+1);
            path.pop_back();
        }
    }

    bool isHuiWen(const string& s,int start,int end) {
        for(int i = start, j = end;i<j;i++,j--) {
            if(s[i]!=s[j])return false;
        }
        return true;
    }

    vector<vector<string>> partition(string s) {
        backTrace(s,0);
        return ans;
    }
};

//runtime:123 ms
//memory:77.3 MB
