class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int> inDegree(numCourses,0); // 初始化入度数组
        vector<vector<int>> edges;
        edges.resize(numCourses);
        for(vector<int> vec:prerequisites) {
            edges[vec[1]].push_back(vec[0]);
            inDegree[vec[0]]++;
        }
        queue<int> q;
        // 初始化队列，储存入度为 0 的点
        for(int i=0;i<numCourses;i++) {
            if(inDegree[i]==0)q.push(i);
        }

        int visited = 0;
        while(!q.empty()) {
            ++visited;
            int u = q.front();
            q.pop();
            for(int v:edges[u]) {
                --inDegree[v];
                if(inDegree[v] == 0) {
                    q.push(v);
                }
            }
        }
        return visited == numCourses;
    }
};

//runtime:18 ms
//memory:17.3 MB
