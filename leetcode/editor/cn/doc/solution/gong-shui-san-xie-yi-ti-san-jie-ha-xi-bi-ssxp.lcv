## 哈希表

由于只要我们判断是否为有效的数独。

所以我们只需要对 `board` 中出现的数进行判断，如果 `board` 中有数违反了数独的规则，返回 `false`，否则返回 `true`。

直观上，我们很容易想到使用 **哈希表** 来记录某行/某列/某个小方块出现过哪些数字，来帮助我们判断是否符合「有效数独」的定义。

这道题唯一的难点可能是在于如何确定某个数落在哪个小方块中，我们可以去小方块进行编号：

![xx1.png](https://pic.leetcode-cn.com/1611905609-HXFmUe-xx1.png)

然后推导出小方块编号和行列的关系为： $idx = \left \lfloor i / 3 \right \rfloor * 3 + \left \lfloor j / 3 \right \rfloor$。

代码：

* []

```Java
class Solution {
    public boolean isValidSudoku(char[][] board) {
        Map<Integer, Set<Integer>> row  = new HashMap<>(), col = new HashMap<>(), area = new HashMap<>();
        for (int i = 0; i < 9; i++) {
            row.put(i, new HashSet<>());
            col.put(i, new HashSet<>());
            area.put(i, new HashSet<>());
        }
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                char c = board[i][j];
                if (c == '.') continue;
                int u = c - '0';
                int idx = i / 3 * 3 + j / 3;
                if (row.get(i).contains(u) || col.get(j).contains(u) || area.get(idx).contains(u)) return false;
                row.get(i).add(u);
                col.get(j).add(u);
                area.get(idx).add(u);
            }
        }
        return true;
    }
}
```

* 时间复杂度：在固定 $9*9$ 的问题里，计算量不随数据变化而变化。复杂度为 $O(1)$
* 空间复杂度：在固定 $9*9$ 的问题里，存储空间不随数据变化而变化。复杂度为 $O(1)$

---

## 数组

大多数的哈希表计数问题，都能转换为使用数组解决。

虽然时间复杂度一样，但哈希表的更新和查询复杂度为均摊 $O(1)$，而定长数组的的更新和查询复杂度则是严格 $O(1)$。

因此从执行效率上来说，数组要比哈希表快上不少。

代码：

* []

```Java
class Solution {
    public boolean isValidSudoku(char[][] board) {
        boolean[][] row = new boolean[10][10], col = new boolean[10][10], area = new boolean[10][10];        
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                int c = board[i][j];
                if (c == '.') continue;
                int u = c - '0';
                int idx = i / 3 * 3 + j / 3;
                if (row[i][u] || col[j][u] || area[idx][u]) return false;
                row[i][u] = col[j][u] = area[idx][u] = true;
            }
        }
        return true;
    }
}
```

* 时间复杂度：在固定 $9*9$ 的问题里，计算量不随数据变化而变化。复杂度为 $O(1)$
* 空间复杂度：在固定 $9*9$ 的问题里，存储空间不随数据变化而变化。复杂度为 $O(1)$

---

## 位运算

更进一步，我们可以使用一个 $int$ 来记录 某行/某列/某个小方块 的数值填入情况：使用从低位开始的 $[1, 9]$ 位来记录该数值是否已被填入。

例如 $(... 111000111 .)_2$ 代表数值 $[1, 3]$ 和 $[7, 9]$ 均被填入。

代码：

* []

```Java
class Solution {
    public boolean isValidSudoku(char[][] board) {
        int[] row = new int[10], col = new int[10], area = new int[10];
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                char c = board[i][j];
                if (c == '.') continue;
                int u = c - '0';
                int idx = i / 3 * 3 + j / 3;
                if ((((row[i] >> u) & 1) == 1) || (((col[j] >> u) & 1) == 1) || (((area[idx] >> u) & 1) == 1)) return false;
                row[i] |= (1 << u);
                col[j] |= (1 << u);
                area[idx] |= (1 << u);
            }
        }
        return true;
    }
}
```

* 时间复杂度：在固定 $9*9$ 的问题里，计算量不随数据变化而变化。复杂度为 $O(1)$
* 空间复杂度：在固定 $9*9$ 的问题里，存储空间不随数据变化而变化。复杂度为 $O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png)（公主号后台回复「送书」即可参与长期看题解学算法送实体书活动）或 加入[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
