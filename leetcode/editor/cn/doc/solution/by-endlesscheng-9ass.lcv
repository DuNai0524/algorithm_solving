二分基础知识：[【基础算法精讲 04】](https://www.bilibili.com/video/BV1AP41137w7/)。

本题视频讲解：[【基础算法精讲 05】](https://www.bilibili.com/video/BV1QK411d76w/)。

欢迎点赞~

* [sol1-Python3]

```py
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        left, right = -1, len(nums) - 1  # 开区间 (-1, n-1)
        while left + 1 < right:  # 开区间不为空
            mid = (left + right) // 2
            if nums[mid] > nums[mid + 1]:  # 蓝色
                right = mid
            else:  # 红色
                left = mid
        return right
```

* [sol1-Java]

```java
class Solution {
    public int findPeakElement(int[] nums) {
        int left = -1, right = nums.length - 1; // 开区间 (-1, n-1)
        while (left + 1 < right) { // 开区间不为空
            int mid = left + (right - left) / 2;
            if (nums[mid] > nums[mid + 1]) right = mid; // 蓝色
            else left = mid; // 红色
        }
        return right;
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    int findPeakElement(vector<int> &nums) {
        int left = -1, right = nums.size() - 1; // 开区间 (-1, n-1)
        while (left + 1 < right) { // 开区间不为空
            int mid = left + (right - left) / 2;
            if (nums[mid] > nums[mid + 1]) right = mid; // 蓝色
            else left = mid; // 红色
        }
        return right;
    }
};
```

* [sol1-Go]

```go
func findPeakElement(nums []int) int {
    left, right := -1, len(nums)-1 // 开区间 (-1, n-1)
    for left+1 < right { // 开区间不为空
        mid := left + (right-left)/2
        if nums[mid] > nums[mid+1] { // 蓝色
            right = mid
        } else { // 红色
            left = mid
        }
    }
    return right
}
```

#### 复杂度分析

- 时间复杂度：$O(\log n)$，其中 $n$ 为 $\textit{nums}$ 的长度。
- 空间复杂度：$O(1)$，仅用到若干额外变量。

