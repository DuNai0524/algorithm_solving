## 模拟

根据题意进行模拟即可。

代码：

* []

```Java
class Solution {
    public String reformatNumber(String number) {
        String s = number.replace(" ", "").replace("-", "");
        int n = s.length();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i += 3) {
            if (sb.length() != 0) sb.append("-");
            if (i + 5 > n) {
                if (i + 3 >= n) sb.append(s.substring(i));
                else sb.append(s.substring(i, i + 2)).append("-").append(s.substring(i + 2));
                break;
            }
            sb.append(s.substring(i, i + 3));
        }
        return sb.toString();
    }
}
```

* []

```Python
class Solution:
    def reformatNumber(self, number: str) -> str:
        s = number.replace(" ", "").replace("-", "")
        n, idx = len(s), 0
        ans = ""
        while idx < n:
            if ans:
                ans += "-"
            if idx + 5 > n:
                ans += s[idx:] if idx + 3 >= n else f"{s[idx:idx+2]}-{s[idx+2:]}"
                break
            ans += s[idx:idx+3]
            idx += 3
        return ans
```

* []

```TypeScript
function reformatNumber(number: string): string {
    let s = ""
    for (let c of number) {
        if (c != " " && c != "-") s += c
    }
    const n = s.length
    let ans = ""
    for (let i = 0; i < n; i += 3) {
        if (ans.length != 0) ans += "-"
        if (i + 5 > n) {
            if (i + 3 >= n) ans += s.substring(i)
            else ans += s.substring(i, i + 2) + "-" + s.substring(i + 2)
            break
        }
        ans += s.substring(i, i + 3)
    }
    return ans
};
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
