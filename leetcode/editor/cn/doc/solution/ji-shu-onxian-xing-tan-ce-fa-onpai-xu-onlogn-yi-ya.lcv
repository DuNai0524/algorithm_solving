#### 方法一、排序 $O(nlogn)$

逻辑：先排序，再依次遍历数组元素，若当前元素小于等于它前一个元素，则将其变为前一个数 +1。

* []

```Java
class Solution {
    public int minIncrementForUnique(int[] A) {
        // 先排序
        Arrays.sort(A);
        int move = 0;
        // 遍历数组，若当前元素小于等于它的前一个元素，则将其变为前一个数+1
        for (int i = 1; i < A.length; i++) {
            if (A[i] <= A[i - 1]) {
                int pre = A[i];
                A[i] = A[i - 1] + 1;
                move += A[i] - pre;
            }
        }
        return move;
    }
}
```

#### 方法二、计数排序  $O(N)$

逻辑：请见注释👇

* []

```Java
class Solution {
    public int minIncrementForUnique(int[] A) {
        // counter数组统计每个数字的个数。
        //（这里为了防止下面遍历counter的时候每次都走到40000，所以设置了一个max，这个数据量不设也行，再额外设置min也行）
        int[] counter = new int[40001];
        int max = -1;
        for (int num: A) {
            counter[num]++;
            max = Math.max(max, num);
        }
        
        // 遍历counter数组，若当前数字的个数cnt大于1个，则只留下1个，其他的cnt-1个后移
        int move = 0;
        for (int num = 0; num <= max; num++) {
            if (counter[num] > 1) {
                int d = counter[num] - 1;
                move += d;
                counter[num + 1] += d;
            }
        }
        // 最后, counter[max+1]里可能会有从counter[max]后移过来的，counter[max+1]里只留下1个，其它的d个后移。
        // 设 max+1 = x，那么后面的d个数就是[x+1,x+2,x+3,...,x+d],
        // 因此操作次数是[1,2,3,...,d],用求和公式求和。
        int d = counter[max + 1] - 1;
        move += (1 + d) * d / 2;
        return move;
    }
}
```

#### 方法三、线性探测法 $O(N)$ （含路径压缩）

这道题换句话说，就是需要把原数组映射到一个地址不冲突的区域，映射后的地址不小于原数组对应的元素。
比如 `[3, 2, 1, 2, 1, 7]` 就映射成了 `[3, 2, 1, 4, 5, 7]`。

我想了下，这道题目其实和**解决 hash 冲突的线性探测法**比较相似！
如果地址冲突了，会探测它的下一个位置，如果下一个位置还是冲突，继续向后看，直到第一个不冲突的位置为止。

**关键点：**因为直接线性探测可能会由于冲突导致反复探测耗时太长，因此我们可以考虑探测的过程中进行**路径压缩**。
**怎么路径压缩呢？就是经过某条路径最终探测到一个空位置 x 后，将这条路径上的值都变成空位置所在的下标 x，那么假如下次探测的点又是这条路径上的点，则可以直接跳转到这次探测到的空位置 x，从 x 开始继续探测**。

下面用样例2：`[3, 2, 1, 2, 1, 7]`，来模拟一遍线性探测的过程。

**step 1: 插入 3：**
![image.png](https://pic.leetcode-cn.com/fd50b8a3b585ffd91c3f47d108750f73b5a8cec72f2a9ab047fc92d63efa7543-image.png)

因为 3 的位置是空的，所以直接放入 3 即可。（此时数组变成了上图，红色表示本次的更改）

**step 2: 插入 2：**
![image.png](https://pic.leetcode-cn.com/47204faec8628b9bbce133a5e4f153f9bc56147cf0b4e06d128ef50d884a4af2-image.png)

因为 2 的位置是空的，所以直接放入 2 即可。（此时数组变成了上图，红色表示本次的更改）

**step 3: 插入 1：**
![image.png](https://pic.leetcode-cn.com/361086e48c561d1fc6850bbec6033ad331c3a9d3e5cb1761f06fce09a01c00b6-image.png)

因为 1 的位置是空的，所以直接放入 1 即可。（此时数组变成了上图，红色表示本次的更改）

**step 4: 插入 2：**
![image.png](https://pic.leetcode-cn.com/4af08cd218443a0613e5fa7165a4be21ff4f1b61151f62fd964313761627283b-image.png)
此时我们发现 2 的位置已经有值了，于是继续向后探测，直到找到空位 4，于是 2 映射到了 4。
并且！！我们要对刚刚走过的路径 2->3->4 进行压缩，即将他们的值都设置为本次探测到的空位 4(那么下次探测就可以直接从 4 往后找了)。
（此时数组变成了上图，红色表示本次的更改）

**step 5: 插入 1：**
![image.png](https://pic.leetcode-cn.com/ad9ead058e608ff6ad9bf9c7b6ab98fe81d41eef3f008413b2582451b60255a3-image.png)

此时我们发现1的位置已经有值了，于是向后探测，探测到了 2，发现 2 的位置也有值了，但是由于 2 在上次的过程中存了上次的空位 4，所以我们直接跳转到 4+1 即从 5 开始探测就行了（而不需要重复走一遍 2->3->4 这条路径喽！），此时我们发现 5 是个空位，因此将 1 映射到 5，并且对与刚刚走过的路径 1->2->5 进行路径压缩即使其都映射到 5！
（此时数组变成了上图，红色表示本次的更改）

**step 6: 插入 7：**
![image.png](https://pic.leetcode-cn.com/73f7dcb708bf44f11dceb636e878173f7212d910e523f2700c830737483f5117-image.png)

因为 7 的位置是空的，所以直接放入 7 即可。（此时数组变成了上图，红色表示本次的更改）

以下是代码实现，耗时只有 11ms

* []

```Java
class Solution {
    int[] pos = new int [80000];
    public int minIncrementForUnique(int[] A) {
        Arrays.fill(pos, -1); // -1表示空位
        int move = 0;
        // 遍历每个数字a对其寻地址得到位置b, b比a的增量就是操作数。
        for (int a: A) {
            int b = findPos(a); 
            move += b - a;
        }
        return move;
    }
    
    // 线性探测寻址（含路径压缩）
    private int findPos(int a) {
        int b = pos[a];
        // 如果a对应的位置pos[a]是空位，直接放入即可。
        if (b == -1) { 
            pos[a] = a;
            return a;
        }
        // 否则向后寻址
        // 因为pos[a]中标记了上次寻址得到的空位，因此从pos[a]+1开始寻址就行了（不需要从a+1开始）。
        b = findPos(b + 1); 
        pos[a] = b; // 寻址后的新空位要重新赋值给pos[a]哦，路径压缩就是体现在这里。
        return b;
    }
}

```

