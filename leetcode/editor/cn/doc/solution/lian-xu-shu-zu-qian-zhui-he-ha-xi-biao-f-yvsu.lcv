> Problem: [525. 连续数组](https://leetcode.cn/problems/contiguous-array/description/)

[TOC]

# 思路

> 题目要求找到含有相同数量的 0 和 1 的最长连续子数组，直接找比较麻烦，我们可以将数组中元素0全部变为-1，那么问题就转化成了找到和为0的子数组。

前缀和法如下：

* java

```java
前缀和法：超出时间限制
class Solution {
    public int findMaxLength(int[] nums) {
        int[] preSum = new int[nums.length];
        preSum[0] = (nums[0] == 0 ? -1 : 1);

        //初始化前缀和数组
        for (int i = 1; i < nums.length; i++) {
            preSum[i] = preSum[i - 1] + (nums[i] == 0 ? -1 : 1);
        }

        int maxLen = 0;
        for (int i = 0; i < preSum.length; i++) {
            for (int j = i; j < preSum.length; j++) {
                if (i == 0 && preSum[j] == 0)
                    maxLen = (j + 1 > maxLen ? j + 1 : maxLen);
                else if (i > 0 && preSum[j] - preSum[i - 1] == 0)
                    maxLen = (j - i + 1 > maxLen) ? j - i + 1 : maxLen;
            }
        }

        return maxLen;
    }
}
```

和[560. 和为 K 的子数组](https://leetcode.cn/problems/subarray-sum-equals-k/description/)这个题很像，方法也是互通的，不过前缀和法在这个题行不通，时间复杂度要求是一维的，那就只能上前缀和+哈希表法了。

# 解题方法

首先将数组中的0元素全部变成-1，然后设置一个哈希表，以前缀和为键，前缀和对应的下标为值，这里的map.containsKey(preSum[i])其实和560题中的map.containsKey(preSum[i] - k)一样，只不过这里的k变成了0。

算法逻辑是这样的，遍历扫描前缀和数组，当发现map.containsKey(preSum[i])为真，则说明哈希表中肯定已经有了一个前缀和preSum[j]，使得preSum[i] == preSum[j]，也就说明子数组[nums[j + 1],..., nums[i]]的数组和为0，将这个子数组的长度i - (j + 1) + 1 == i - j与maxLen比较，更新maxLen的值。

注意，为了让哈希表中存储的是前缀和对应的最小下标（比如下标i > j，preSum[i] == preSum[j]，那么哈希表中应该存放的是下标j），每次循环时，如果该前缀和不存在于哈希表中，才将该前缀和及下标存入哈希表。

# 复杂度

时间复杂度:

> 添加时间复杂度： $O(n)$

空间复杂度:

> 添加空间复杂度： $O(n)$

# Code

* []

```java
//前缀和 + 哈希表法：
class Solution {
    public int findMaxLength(int[] nums) {
        int[] preSum = new int[nums.length];
        preSum[0] = (nums[0] == 0 ? -1 : 1);

        for (int i = 1; i < nums.length; i++) {
            preSum[i] = preSum[i - 1] + (nums[i] == 0 ? -1 : 1);
        }

        int maxLen = 0;
        Map<Integer, Integer> map = new HashMap<>(preSum.length);
        map.put(0, -1);// 前缀和为0的下标
        for (int i = 0; i < preSum.length; i++) {
            if (map.containsKey(preSum[i])) {
                int len = i - map.get(preSum[i]);
                maxLen = (len > maxLen ? len : maxLen);
            } else {
                map.put(preSum[i], i);
            }
        }

        return maxLen;
    }
}
```

