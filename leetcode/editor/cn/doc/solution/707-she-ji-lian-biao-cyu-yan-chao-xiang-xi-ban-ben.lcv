### 解题思路

设计题本身其实原理是很简单的，也不涉及算法。
但是很容易错，尤其是C语言，非常容易出错。
今天琢磨了一会，终于把这个题一把过了。
作为一个刷题小白，要把自己试错的思路好好的记录下来

**易错点：**
- 内存分配与释放
- 链表的遍历
- 第0个和最后一个节点怎么处理
- 怎么遍历链表才不会出现空指针异常
- 链表构造，怎么挂链

现在来从头到尾扒了这个链接，康康它的运作。
首先说明一下链表的定义；
每一个节点需要有一个值，和一个指向下一个节点的next指针。

在C语言里，struct结构体里，如果使用typedef的形式定义一个别名，如题目模板这样：

* 

```
typedef struct {

} MyLinkedList;
```

如果在这个struct定义里面，直接把next指针定义为 ```MyLinkedList *next``` 就会报错
因为别名MyLinkedList是在结构体定义结束后才可以识别的一个别名；
所以在结构体里面，是不认识这个别名的。这是一个小坑。

那么正确的定义方法是什么？
如下：

* 

```
typedef struct MyLinkedList_t{
	int val;
	struct MyLinkedList_t *next;
} MyLinkedList;
```

它的不同之处在于，我们也规定了struct本身的名字。
这个定义的意思是：我有一个struct MyLinkedList_t， 它的别名是MyLinkedList；
那么在struct的里面，我就可以识别struct MyLinkedList_t这个结构体定义，成功地定义我们的next指针。
后面我们同样也可以直接用别名作为类型名去定义变量。
变量的定义有两种方式：

* 

```
1. struct MyLinkedList_t 变量名A;
2. MyLinkedList 变量名B;
```

接下来，链表的定义已经扒开了神秘面纱，我们进入下一个环节。
怎么根据这个定义，构造一个链表。

**首先我说明第一版，第一次做这个题，出现的一个不得其解的错误。**

* 

```
第一版，错误示范
思路：
创建一个obj，为NULL：
当有add的时候，判断如果现在obj是空的，就把它赋值成第一个节点。
再来一个，挂在这个节点的next上。

产生的问题：
1. obj本身指向的内容会随着第一个节点去改变。
   由于我们有接口可以在链表头上增加节点，这样的话，每次obj作为链表的第一个节点，它的指向都会变。
   感觉上没有什么问题，但实际上，在实测中obj从函数调用出来后会失效，（暂时还不知道为什么，求评论区指教，地址都是malloc的）
   导致错误。
2. 涉及index时，需要每次判断是否是空链表，对index = 0的情况也不好判断
3. 释放内存也带来问题

```

好，经过惨痛的教训，我们有没有什么办法，让一个链表的头，或者可以理解成，这个链表的入口，是固定的，让我们更好地访问它，更不容易出错？

**“自然而然”地想到：用一个空虚的、虚无的，不代表节点意义的节点作为链表头，我们不关注它的val是多少，只关注它的next，挂的是真正链表的第一个节点。**
那么这个虚假的链表头，就是obj的固定入口，只要我们malloc了它，它的地址就不会再改变。
也就是说，我们create一个链表，返回的obj，之后就不会再改变了。这对我们管理这个链表，有很大的好处。

以下是创建链表的内容，详细注解：

* 

```
MyLinkedList* myLinkedListCreate() {
	/*1. 把我们的虚假链表头malloc出来，之后它就是我们访问、管理链表的入口*/
    MyLinkedList *obj = (MyLinkedList *)malloc(sizeof(MyLinkedList));
	/*2. 对虚假链表头初始化，val随便是多少都可以，我们方便而取0，以后也用不到；next为NULL，此时真正的链表是空的*/
	obj->val = 0;
	obj->next = NULL;
	/*3. 返回我们的链表入口*/
	return obj;
}
```

下一步，有了链表的管理入口，下来我们开始想办法，怎么在链表头增加节点。
我们手动假设两种情况。

* 

```
一. 链表是空的
比如：

虚假的链表头    ->     NULL
     obj       ->     NULL(空链表)

那么我们增加一个节点的过程就是这样的：
1. 首先将节点初始化出来（malloc+赋值）：我们得到一个节点Node，假设它的var是1，那么next是NULL
Node：
     val:   1
     next:  NULL
2. 把Node挂在链表头的后面，也就是链表的第一个节点。
虚假的链表头    ->     第一个节点    ->     NULL   
     obj       ->      Node(1)     ->     NULL(没有其他节点了)
这样就完成了。
```

* 

```
一. 链表不是空的
比如：

虚假的链表头    ->      一串链表 
     obj       ->      Node(5)   ->   Node(6)

那么我们增加一个节点的过程就是这样的：
1. 首先将节点初始化出来（malloc+赋值）：我们得到一个节点Node，假设它的var是1，那么next是NULL
Node：
     val:   1
     next:  NULL
2. 把Node的next，挂成我们已存在的链表：

                原链表，通过obj->next可以取到
Node(1)    ->     Node(5)   ->   Node(6)
这样就成为了一个新的链表

3. 把Node挂在链表头的后面，也就是把新链表挂在obj这个入口的后面。
虚假的链表头    ->     新链表 
     obj       ->      Node(1)     ->     原链表
这样就完成了。
```

体现在代码里：

* 

```
void myLinkedListAddAtHead(MyLinkedList* obj, int val) {

    /*1. 初始化节点*/
	MyLinkedList *Node = (MyLinkedList *)malloc(sizeof(MyLinkedList));
	Node->val = val;
	Node->next = NULL;

	/*2. 分情况对待*/
	if (obj->next == NULL) {
		/*3. 如果原链表是空的，就直接把obj的next指向新节点*/
		obj->next = Node;
		return;
	} else {
		/*4. 如果原链表不是空的，我们先把原链表挂在Node节点屁股后面，形成新链表*/
		Node->next = obj->next;
		/*5. 再把新链表更新到obj这个入口上，也就是新链表挂在obj虚拟节点的屁股后面*/
		obj->next = Node;
	}
}
```

现在考虑第二个接口，通过index来get的接口。
题目要求：
```get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。```

首先分析，索引无效有哪些情况：

* 

```
1. index < 0
2. 链表是空的，任何索引都无效。
3. index超过了链表的长度
```

这样就很清楚，前两种情况我们在接口的开头就可以进行拦截：
```if (index < 0> || obj->next == NULL)```

那么下面，我们要考虑的主要是第三种情况。
接下来，就涉及到了一个重要的问题：链表的遍历。
数组非常好进行遍历，是因为完整遍历一个数组，只需要知道它的长度，我们就可以用for循环。
对于链表，它的长度未知，只能通过一个又一个节点去找next，直到发现某个节点的next是NULL，就知道链表到头了。

那么while循环的终止条件，问题来了：
假设真实链表头是 *list，那会有两种终止条件：
第一种：

* 

```
while(list->next != NULL) {
	list = list->next;
}
```

假设链表为 1->2->3->4->5
那么以这种方式进行遍历，最后list会停在5这个节点。
5->next 是NULL，循环终止。

第二种：

* 

```
while(list != NULL) {
	list = list->next;
}
直接这么写会不会在list->next这里取到空指针？
理论上是不会的，因为list节点本身我们是malloc出来的，取next是ok的，
但是next指向的内容如果是NULL，等于我们将list赋值成NULL，然后会在下一个循环条件退出。
```

假设链表为 1->2->3->4->5
那么以这种方式进行遍历，最后list会停在5这个节点的后面。
也就是最终，list停在了5后面的NULL上。

所以这两种方式怎么选择？
对我们来说，根据应用又有不同的情况：

* 

```
1. 要遍历链表，对其中的每一个节点都访问到，并进行操作。
这种场景的意思是：
假设链表为 1->2->3->4->5
要对每个节点，1,2,3,4,5都进行某个操作后，再退出循环。
这种情况下，我们可以采用第二种方式，也就是最后list停在5后面的NULL节点上。
这样，节点5也会在循环的里面，被操作到。
```

* 

```
2. 遍历链表的目的是找到尾节点，对尾节点进行操作。
这种场景的意思是：
假设链表为 1->2->3->4->5
要找到尾节点5，并对它进行操作。
要对一个节点进行操作，那我们必须停在它的上面。
这种情况要选择第一种，最终list停在5节点上面，我们就可以对它进行操作。
```

当然了以上两种都是最简单的情况，通常我们还面对一种常规场景，
就是题目中的按index寻找。
这时候就需要引入一个新的变量，来记录我们现在处在链表的哪个位置。

---- 其实到这里，了解了遍历方式后，有另一个接口我们可以很容易写出来了
那就是链表的尾插，在尾节点后增加节点。
题目要求：``` addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。 ```
根据刚才的分析，我们用到的是第一种遍历方式，要对最后一个节点进行操作，把它的next指向新节点。
所以我们要让list停留在最后一个节点本身。
很容易实现这个函数：

* 

```
void myLinkedListAddAtTail(MyLinkedList* obj, int val) {
	/*1. 初始化新节点*/
	MyLinkedList *Node = (MyLinkedList *)malloc(sizeof(MyLinkedList));
	Node->val = val;
	Node->next = NULL;

	/*2. 不能改变obj本身的位置，所以我们创建一个新指针标记链表移动的当前临时位置*/
    /*   因为真实链表也可能是空的，所以我们从obj开始，如果是空的就相当于直接在obj后面加一个节点*/
	MyLinkedList *nowList = obj;
	/*3. 用第一种方式遍历链表，使得临时位置停在最后一个节点本身*/
	while (nowList->next != NULL) {
		nowList = nowList->next;
	}
	/*4. 对尾节点操作，把它的next指向新节点*/
	nowList->next = Node;
}
```

好，分析了两种链表遍历的方式，我们现在需要考虑，要停在位置为index的节点上。
我们采用第二种方式。
那么终止循环的条件又应该是什么呢？
两种情况：

* 

```
1. 链表当前的Node已经为NULL
2. Node还不是NULL，但是当前的位置已经达到了index
```

那么就应该有两种写法：

* 

```
一。以当前Node为NULL作为外面的循环终止条件；以now位置为index作为break条件终止循环
int now = 0;
while(list != NULL) {
	if (now == index) {
		return list->val;
	}
	list = list->next;
	now++;
}

循环结束后考虑，链表已经遍历完了，now都没有达到index，说明index无效，超过了链表的长度：
return -1;	
（这里不需要判断，因为循环处理，list要么是NULL，要么index无效，肯定是返回-1）

```

或者第二种写法：

* 

```
二。以当前位置now达到index位置作为循环终止条件，以链表当前Node为NULL作为break条件终止循环
int now = 0;
while(now < index) {
	if (list == NULL) {
		return -1;
	}
	list = list->next;
	now++;
}

/*注意这里为什么要判断。
 * 1. 考虑index == 0时，循环不会进入
 * 2. now++后，实际当前的list我们并不知道是不是NULL，必须判断一下，也就是当前的now位置的list，没有经过判断
 *    我们只知道now位置现在就是index位置，但是不知道这个Node到底是不是NULL。*/
if (list != NULL) {
	return list->val;
}
return -1;

```

再啰嗦一遍完整的的接口：

* 

```
题目要求：get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。

int myLinkedListGet(MyLinkedList* obj, int index) {

	/*1. 对明显的异常情况进行拦截。index < 0，以及真实链表是空的情况，直接返回-1*/
	if (index < 0 || obj->next == NULL) {
		return -1;
	}

	/*2. 定义一个now位置，从0开始； 取出真实链表作为0位置*/
	int now = 0;
	MyLinkedList *listNow = obj->next;

	/*3. 进行链表遍历，我们采用的遍历方式是取到节点本身
	 *   循环终止条件：       now位置达到index位置
	 *   break条件：         当前位置节点为空，直接返回-1
	 *   遍历过程：          每次取next节点，然后now位置后移
	 *   循环结束后的判断：  循环结束后，即取到了now位置为index位置的节点
	 *                      但是该节点是否是NULL没有经过判断，所以需要判断
	 *                      如果该节点不为空，就是我们要找的，返回它的val
	 *                      如果为空，证明该节点虽然位置到了index，但是它刚好是空的，返回-1。*/

	while (now < index) {
		if (listNow == NULL) {
			return -1;
		}

		listNow = listNow->next;
		now++;
	}

	if (listNow != NULL) {
		return listNow->val;
	}

	return -1;
}
```

增加节点：
在链表里如何增加一个节点：

假设链表是这样：

* 

```
虚假的链表头    ->      一串链表 
     obj       ->      Node(5)   ->   Node(6)    ->     Node(7)
```

最基本的过程：

* 

```
1. 先初始化一个新节点
2. 找到index的前一个节点
3. 新节点的next指向index位置
4. index的前一个节点的next指向新节点
```

要考虑的问题：

* 

```
1. 异常情况： index < 0，题目要求负索引直接头插，我们可以直接调用已经写好的头插函数
2. index等于链表长度，也就是index位置刚好是尾节点，这时候要尾插
3. index大于链表长度，也就是index位置是空的，不操作
4. 正常情况，新节点要在index位置插入。也就是我们要找到index - 1位置，完成上述基本插入操作。
```

关机问题：找到index的 **上一个节点**
我们希望操作的节点，它本身必须不是NULL，所以我们以第一种方式遍历，回忆一下，
以第一种方式遍历，我们最后一个遍历到的节点，停在了7上面。

确定遍历方式后，考虑下位置的问题。
我们要拿到index的前一个位置节点，也就是说break出来的条件应该是now == index - 1

我们模拟写一遍：

* 

```
int now = 0;
while(list->next != NULL) {
	if (now == index - 1) {
		break;
	}
	list = list->next;
	now++;
}
```

分析到，循环终止有两种情况：

* 

```
1. list是最后一个节点，它的next是NULL。 now位置和index位置关系不明，但一定没有超过index - 1

2. now位置是index的前一个位置。 在循环里跳出的，所以满足list->next != NULL, list一定不是尾节点
```

在情况1中，如果now位置不是index - 1，说明index超过了链表长度，直接返回。
情况2中，情景一定正常， 可以进行index处的插入操作。
所以我们可以用一个条件判断：now == index - 1，满足它就可以操作，不满足就退出。

完整实现：

* 

```
void myLinkedListAddAtIndex(MyLinkedList* obj, int index, int val) {

    /*1. 如果是负索引，直接头插*/
	if (index <= 0) {
		myLinkedListAddAtHead(obj, val);
	}

    /*2. now位置从0开始，链表遍历从真实链表开始*/
	int now = 0;
	MyLinkedList *nowList = obj->next;

    /*3. 链表遍历，停在每个节点本身，最后一个节点不为空。
     *   break 条件： now位置达到index - 1位置*/
	while (nowList->next != NULL) {
		if (now == index - 1) {
			break;
		}
		nowList = nowList->next;
		now++;
	}

    /*如果不满足now 位置是index - 1位置，一定是通过节点->next == NULL跳出循环的，又不满足位置条件，index无效，不操作*/
	if (index - 1 != now) {
		return;
	}

    /*4. 初始化一个新节点，新节点的next指向index位置节点，即是当前节点(index - 1位置)的next
     *   然后将index - 1位置节点的next，指向新节点*/
	MyLinkedList *Node = (MyLinkedList *)malloc(sizeof(MyLinkedList));
	Node->val = val;
	Node->next = nowList->next;
	nowList->next = Node;
}
```

接下来我们再看看，删除节点的操作怎么完成。
首先说原理，在链表里怎么删除一个节点。

假设链表是这样：

* 

```
虚假的链表头    ->      一串链表 
     obj       ->      Node(5)   ->   Node(6)    ->     Node(7)
```

我们要删除节点Node(6)

* 

```
1. 找到Node(6)的前一个节点，Node(5)
2. 把Node(5)的next，挂到Node(6)的next上。
```

然后链表就变成了：

* 

```
虚假的链表头    ->      一串链表 
     obj       ->      Node(5)   ->     Node(7)
```

看起来非常简单了。那么这里最关键的一个问题就是：
我要找到index位置这个要删除节点的，**上一个节点**
我们希望操作的节点，它本身必须不是NULL，所以我们以第一种方式遍历，回忆一下，
以第一种方式遍历，我们最后一个遍历到的节点，停在了7上面。

确定遍历方式后，考虑下位置的问题。
我们要拿到index的前一个位置节点，也就是说break出来的条件应该是now == index - 1

我们模拟写一遍：

* 

```
int now = 0;
while(list->next != NULL) {
	if (now == index - 1) {
		break;
	}
	list = list->next;
	now++;
}

那么循环终止就有两种情况了：
1. list->next == NULL,也就是当前list是最后一个节点；
   这时候的now位置，是不是index - 1，并没有判断。
   但是无需判断，因为我们停留的位置是index的前一个，已经是最后一个节点。
   说明index位置没有节点，那么就不需要进行操作。
2. list->next不为NULL的情况下，now == index - 1.
   也就是，list的位置正好是index位置的前一个节点。这种情况我们可以进行删除操作。

综合上面这两种情况，我们发现遍历出来后，如果满足两个条件，就可以进行删除操作：
条件1 ： list->next != NULL
条件2 ： now == index - 1

所以自然：
if (list->next != NULL && now == index - 1) {
	list->next = list->next->next;
}

```

完整实现：

* 

```
void myLinkedListDeleteAtIndex(MyLinkedList* obj, int index) {
    /*1. 异常情况拦截：index < 0和真实链表为空的情况，直接退出*/
	if (index < 0 || obj->next == NULL) {
		return;
	}

    /*如果index 是 0，此时真实链表至少有一个节点，所以可以直接删除第一个节点*/
	if (index == 0) {
		obj->next = obj->next->next;
		return;
	}

	/*2. now从0位置开始，取出真实链表，进行遍历*/
	MyLinkedList *nowList = obj->next;
	int now = 0;

    /*3. 链表遍历：
	 *   循环终止条件： 当前节点已经是最后一个节点，它的next是NULL 
	 *   break条件：   当前节点是index位置的前一个节点： now == index - 1
	 *   循环结束后：   需满足当前节点既不是最后一个节点，也是index位置的前一个位置，才进行删除操作*/
	while (nowList->next != NULL) {
		if (now == index - 1) {
			break;
		}
		nowList = nowList->next;
		now++;
	}

	if (now == index - 1 && nowList->next != NULL) {
		nowList->next = nowList->next->next;
	}
}
```

最后，系统设计题一般都会要求实现free接口，释放已经申请的内存。
我们思考一下，一个链表，每一个节点都需要完成一次释放。
如果直接从第一个节点释放，那么后面的next就无法取到了，链断掉以后，剩下的内存就再也无法访问。

所以链表释放内存必须从最后一个开始释放，再释放倒数第二个。
但是问题又来了，如果我们遍历，取到最后一个节点释放，但是链表是单向的，我们无法通过链表取到它上一个节点。

那怎么办呢？
想到一个方法： 递归。

每次只要检查到当前节点还有下一个节点，就先去释放下一个节点。
如果没有下一个节点了，就真正完成释放。
然后逐层往回走，最后释放整个链表。

递归需要确定终止条件，和每次的操作
终止条件：下一个节点是空，即Node->next == NULL
每次操作：Node->next = NULL;
free(Node);

* 

```
递归函数：
if (Node->next != NULL) {
	递归调用;
    Node->next = NULL;
}

free(Node);
```

完整完成：

* 

```
void myNodeFree(MyLinkedList* Node) {
	if (Node->next != NULL) {
		myNodeFree(Node->next);
		Node->next = NULL;
	}
	free(Node);
	
}

void myLinkedListFree(MyLinkedList* obj) {
    myNodeFree(obj);
}
```

=====更新完毕=====
这次题解写了很久，很详细的捋清楚所有的思路，自己写题解的过程中也剖析了链表的一些操作套路。
希望下次遇到这种题可以很快写出来

### 代码

* c

```c



typedef struct MyLinkedList_t{
	int val;
	struct MyLinkedList_t *next;
} MyLinkedList;

/** Initialize your data structure here. */

MyLinkedList* myLinkedListCreate() {
    MyLinkedList *obj = (MyLinkedList *)malloc(sizeof(MyLinkedList));
	obj->val = 0;
	obj->next = NULL;
	return obj;
}

/** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */
int myLinkedListGet(MyLinkedList* obj, int index) {
	if (index < 0 || obj->next == NULL) {
		return -1;
	}

	int now = 0;
	MyLinkedList *listNow = obj->next;
	while (now < index) {
		if (listNow == NULL) {
			return -1;
		}

		listNow = listNow->next;
		now++;
	}

	if (listNow != NULL) {
		return listNow->val;
	}

	return -1;
}

/** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */
void myLinkedListAddAtHead(MyLinkedList* obj, int val) {
	MyLinkedList *Node = (MyLinkedList *)malloc(sizeof(MyLinkedList));
	Node->val = val;
	Node->next = NULL;

	if (obj->next == NULL) {
		obj->next = Node;
		return;
	} else {
		Node->next = obj->next;
		obj->next = Node;
	}
}

/** Append a node of value val to the last element of the linked list. */
void myLinkedListAddAtTail(MyLinkedList* obj, int val) {
	MyLinkedList *Node = (MyLinkedList *)malloc(sizeof(MyLinkedList));
	Node->val = val;
	Node->next = NULL;

	MyLinkedList *nowList = obj;
	while (nowList->next != NULL) {
		nowList = nowList->next;
	}

	nowList->next = Node;
}

/** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */
void myLinkedListAddAtIndex(MyLinkedList* obj, int index, int val) {
	if (index <= 0) {
		myLinkedListAddAtHead(obj, val);
	}

	int now = 0;
	MyLinkedList *nowList = obj->next;
	while (nowList->next != NULL) {
		if (now == index - 1) {
			break;
		}
		nowList = nowList->next;
		now++;
	}

	if (index - 1 != now) {
		return;
	}

	MyLinkedList *Node = (MyLinkedList *)malloc(sizeof(MyLinkedList));
	Node->val = val;
	Node->next = nowList->next;
	nowList->next = Node;
}

/** Delete the index-th node in the linked list, if the index is valid. */
void myLinkedListDeleteAtIndex(MyLinkedList* obj, int index) {
	if (index < 0 || obj->next == NULL) {
		return;
	}

	if (index == 0) {
		obj->next = obj->next->next;
		return;
	}

	MyLinkedList *nowList = obj->next;
	int now = 0;
	while (nowList->next != NULL) {
		if (now == index - 1) {
			break;
		}
		nowList = nowList->next;
		now++;
	}

	if (now == index - 1 && nowList->next != NULL) {
		nowList->next = nowList->next->next;
	}
}

void myNodeFree(MyLinkedList* Node) {
	if (Node->next != NULL) {
		myNodeFree(Node->next);
		Node->next = NULL;
	}
	free(Node);
	
}

void myLinkedListFree(MyLinkedList* obj) {
    myNodeFree(obj);
}

/**
 * Your MyLinkedList struct will be instantiated and called as such:
 * MyLinkedList* obj = myLinkedListCreate();
 * int param_1 = myLinkedListGet(obj, index);
 
 * myLinkedListAddAtHead(obj, val);
 
 * myLinkedListAddAtTail(obj, val);
 
 * myLinkedListAddAtIndex(obj, index, val);
 
 * myLinkedListDeleteAtIndex(obj, index);
 
 * myLinkedListFree(obj);
*/
```

