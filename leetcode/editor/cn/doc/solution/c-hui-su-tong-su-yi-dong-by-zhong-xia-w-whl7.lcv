### 解题思路

![image.png](https://pic.leetcode.cn/1668016887-WwYyJX-image.png)

### 代码

* cpp

```cpp
class Solution {
public:

    int result = 0;

    void backtracking(string tiles,vector<bool>& used){
        for(int i = 0;i < tiles.size();++i){
            //这里tiles[i] == tiles[i - 1]代表需要去重的相同数字
            //used[i - 1] == false代表i是i-1的同层节点，因为这个时候i-1并没有被选择，相等于层次去重，这个时候我们去掉的相当于tiles[i]tiles[i-1]，而tiles[i-1]tiles[i]是被我们所接受的，也就是以tiles[i]为根节点的整个树全部去掉
            if(i > 0 && tiles[i] == tiles[i-1] && used[i - 1] == false){
                continue;
            }
            //自身去重
            if(used[i] == false){
                used[i] = true;
                result++;
                backtracking(tiles,used);
                used[i] = false;
            }
        }
    }

    int numTilePossibilities(string tiles) {
        /*回溯（类似于重复元素子集 + 排列的综合体问题）
            主体思路：我们就按照多叉树的思路来进行分析和剪枝
            1.多叉树结构分析：根节点看作空字符串，多叉树的第i层（从0开始算）代表结果字符串的第i位置可能选择的字符
            2.答案节点：除了根节点的所有子节点都是我们需要的答案（本题的话统计个数即可）
            3.去重：
                思路：对于多叉树的同一层进行分析，如果该层已经选择字符ch作为字符串第i位置的字符，那么就算tiles中ch数量大于1，我们也没必要在本层再次选择ch了
                做法：对于titles字典序升序（降序也可以）排序，目的是让重复元素在titles中的位置是相邻的，然后像重复元素排列问题那样设置一个used数组来记录titles[i]是否被使用过
            4.总结：本题相当于在重复元素排列问题上选取所有子节点
        */
        sort(tiles.begin(),tiles.end());
        vector<bool> used(tiles.size(),false);
        backtracking(tiles,used);
        return result;
    }
};
```

PS：如47. 全排列 II中，我们的去重条件used[i - 1] == false或者used[i - 1] == true是都可以的，而本题只能是used[i - 1] == false，这是为什么呢？
1. 首先used[i - 1] == false代表的是树层去重，used[i - 1] == true代表的是树枝去重
2. 因为全排列我们需要的是叶子节点统计结果，在叶子节点之前完成去重剪枝就行了
3. 考虑used[i - 1] == true也就是树枝去重，如1,1*,2：1,2,1*就是不被允许的，但是1*,2,1是被允许的，在1,2,1这个叶子节点统计答案之前剪枝成功即可
   重点：但是本题不行，本题要收集所有子节点，子节点本身就不能有重复的情况，按照used[i - 1] == true来剪枝A,A*,B
   序列A,B,A*和序列A*,B,A是会去重只保留一个的，但是序列A,B和序列A*,B并不会去重，而是会重复统计

