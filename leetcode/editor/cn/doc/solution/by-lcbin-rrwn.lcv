**方法一：哈希表**

我们用哈希表 `cnt` 存储每个域名（子域名）对应的访问次数。

然后遍历数组，对于每个域名，我们将其拆分为子域名，然后更新哈希表 `cnt` 中对应的访问次数。

最后，我们将哈希表中的键值对转换为数组，即可得到答案。

时间复杂度 $O(n\times m)$，空间复杂度 $O(n\times m)$。其中 $n$ 是数组 `cpdomains` 的长度，而 $m$ 视为数组 `cpdomains` 每个元素的长度。

* [sol1-Python3]

```python
class Solution:
    def subdomainVisits(self, cpdomains: List[str]) -> List[str]:
        cnt = Counter()
        for s in cpdomains:
            v = int(s[:s.index(' ')])
            for i, c in enumerate(s):
                if c in ' .':
                    cnt[s[i + 1:]] += v
        return [f'{v} {s}' for s, v in cnt.items()]
```

* [sol1-Java]

```java
class Solution {
    public List<String> subdomainVisits(String[] cpdomains) {
        var cnt = new HashMap<String, Integer>();
        for (var v : cpdomains) {
            int i = v.indexOf(" ");
            int a = Integer.parseInt(v.substring(0, i));
            for (; i < v.length(); ++i) {
                if (v.charAt(i) == ' ' || v.charAt(i) == '.') {
                    var t = v.substring(i + 1);
                    cnt.put(t, cnt.getOrDefault(t, 0) + a);
                }
            }
        }
        var ans = new ArrayList<String>();
        for (var e : cnt.entrySet()) {
            ans.add(e.getValue() + " " + e.getKey());
        }
        return ans;
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    vector<string> subdomainVisits(vector<string>& cpdomains) {
        unordered_map<string, int> cnt;
        for (auto& s : cpdomains) {
            int i = s.find(' ');
            int v = stoi(s.substr(0, i));
            for (; i < s.size(); ++i) {
                if (s[i] == ' ' || s[i] == '.') {
                    cnt[s.substr(i + 1)] += v;
                }
            }
        }
        vector<string> ans;
        for (auto& [s, v] : cnt) {
            ans.push_back(to_string(v) + " " + s);
        }
        return ans;
    }
};
```

* [sol1-Go]

```go
func subdomainVisits(cpdomains []string) []string {
    cnt := map[string]int{}
    for _, s := range cpdomains {
        i := strings.IndexByte(s, ' ')
        v, _ := strconv.Atoi(s[:i])
        for ; i < len(s); i++ {
            if s[i] == ' ' || s[i] == '.' {
                cnt[s[i+1:]] += v
            }
        }
    }
    ans := make([]string, 0, len(cnt))
    for s, v := range cnt {
        ans = append(ans, strconv.Itoa(v)+" "+s)
    }
    return ans
}
```

---

有任何问题，欢迎评论区交流，欢迎评论区提供其它解题思路（代码），也可以点个赞支持一下作者哈😄~
