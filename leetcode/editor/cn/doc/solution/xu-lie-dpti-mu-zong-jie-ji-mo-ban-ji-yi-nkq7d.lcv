本文意在总结序列dp题目和模板。

### 使子序列相等的题目

> Problem: [1143. 最长公共子序列](/problems/longest-common-subsequence/)

> Problem: [1035. 不相交的线](/problems/uncrossed-lines/)

> Problem: [392. 判断子序列](/problems/is-subsequence/)

> Problem: [115. 不同的子序列](/problems/distinct-subsequences/)

> Problem: [583. 两个字符串的删除操作](/problems/delete-operation-for-two-strings/)

> Problem: [72. 编辑距离](https://leetcode.cn/problems/edit-distance/description/)

### 子序列在满足某种要求时，求最长、最大子序列的题目

> Problem: [674. 最长连续递增序列](/problems/longest-continuous-increasing-subsequence/)

> Problem: [53. 最大子数组和](/problems/maximum-subarray/)

> Problem: [300. 最长递增子序列](/problems/longest-increasing-subsequence/)

> Problem: [1626. 无矛盾的最佳球队](/problems/best-team-with-no-conflicts/)

> Problem: [718. 最长重复子数组](/problems/maximum-length-of-repeated-subarray/)

> Problem: [368. 最大整除子集](/problems/largest-divisible-subset/)

[TOC]

# 思路

> 两个序列比较一定是二维变量确定状态。

# 注意事项

> **不连续递增子序列**的跟**前 0-i 个状态**有关，**连续递增的子序列**只跟**前一个状态**有关    
> 注意**重点理解代码中res的含义**，表明**两种分支结果的综合体**

# 复杂度

- 时间复杂度:

> 状态个数 * 得到一个状态的时间
> 通常「序列 DP」需要 $O(n^2)$的时间复杂度  
> 而某些具有特殊性质的「序列 DP」问题，能够用**贪心+二分**做到 $O(nlogn)$ 复杂度。

# 1143 Code

* []

```Python
class Solution:
    def longestCommonSubsequence(self, s: str, t: str) -> int:
        n,m = len(s),len(t)
        @cache
        def dfs(i,j):
            if i < 0 or j < 0:
                return 0
            if s[i] == t[j]:
                return dfs(i-1,j-1) + 1
            return max(dfs(i-1,j),dfs(i,j-1))
        return dfs(n-1,m-1)
```

# 1035 Code

> 同1143，一摸一样

* []

```Python
class Solution:
    def maxUncrossedLines(self, s: List[int], t: List[int]) -> int:
        n,m = len(s),len(t)
        @cache
        def dfs(i,j):
            if i < 0 or j < 0:
                return 0
            if s[i] == t[j]:
                return dfs(i-1,j-1) + 1
            return max(dfs(i-1,j),dfs(i,j-1))
        return dfs(n-1,m-1)
```

# 392 Code

* []

```Python
class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        @cache
        def dfs(i,j):
            if i < 0:
                return True
            if j < 0:
                return False
            if s[i] == t[j]:
                return dfs(i-1,j-1)
            return dfs(i,j-1)
        return dfs(len(s)-1,len(t)-1)
```

# 115 Code

* []

```Python
class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        @cache
        def dfs(i,j):
            # 此处顺序不能调换，因为有可能i<0且j<0如果调换那么返回的是0，就不对了
            # 题意是只要是j小于0了，就证明被匹配完了
            if j < 0:
                return 1
            if i < 0:
                return 0
            res = 0
            if s[i] == t[j]:
                res += dfs(i-1,j-1)
            res += dfs(i-1,j)
            return res
        
        return dfs(len(s)-1,len(t)-1)    
```

# 583 Code

* []

```Python
class Solution:
    def minDistance(self, s: str, t: str) -> int:
        m,n = len(s),len(t)
        @cache
        def dfs(i,j):
            if i< 0 or j < 0 :
                return max(i,j)+1
            if s[i] == t[j]:
                return dfs(i-1,j-1)
            return min(dfs(i-1,j),dfs(i,j-1))+1
        return dfs(m-1,n-1)
```

# 72 Code

* []

```Python
class Solution:
    def minDistance(self, s: str, t: str) -> int:
        n,m = len(s),len(t)
        @cache
        def dfs(i,j):
            if i<0:
                return j+1
            if j<0:
                return i+1
            if s[i] == t[j]:
                return dfs(i-1,j-1)
            return min(dfs(i-1,j),dfs(i,j-1),dfs(i-1,j-1))+1
        return dfs(n-1,m-1)
```

# 674 Code

* []

```Python
class Solution:
    def findLengthOfLCIS(self, nums: List[int]) -> int:
        @cache
        def dfs(i):
            res = 0
            if i > 0 and nums[i-1] < nums[i]: # 如果有上一个数而且上一个数比当前数小那么就把res赋值为dfs(i-1)
                res = dfs(i-1)
            return res + 1  # 不管哪种情况都需要加上1 才能表示当前i的序列长度
        ans = 0
        for i in range(len(nums)):
            ans = max(ans,dfs(i))
        return ans 
```

# 53 Code

* []

```Python
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        @cache
        def dfs(i):
            if i < 0:
                return 0
            res = 0
            if dfs(i-1)>0:
                res = dfs(i-1)
            return res + nums[i]
            # pre = dfs(i-1)  # 后面的结果怎么影响当前结果
            # if pre > 0:
            #     return nums[i] + pre
            # return nums[i]
        ans = -inf
        for i in range(len(nums)):
            ans = max(ans,dfs(i))
        return ans

```

# 300 Code

* []

```Python
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        # 枚举nums[i] 之前的最长子序列,枚举选哪个
        @cache
        def dfs(i):
            res = 0
            for j in range(i):
                if nums[j] < nums[i]:
                    res = max(res,dfs(j))
            return res+1
        ans = 0
        for i in range(len(nums)):
            ans = max(ans,dfs(i))
        return ans
```

# 1626 Code

* []

```Python
class Solution:
    def bestTeamScore(self, scores: List[int], ages: List[int]) -> int:
        # 矛盾是     age小的分数严格大于年龄大的分数
        a = sorted(zip(scores,ages)) # 按照分数排序之后，先保证分数的正确性
        @cache
        def dfs(i):
            res = 0 
            for j in range(i):
                if a[i][1] >= a[j][1]:
                    res = max(res,dfs(j))  # i之前的选一个得分最大的j保留下来算答案
            return res + a[i][0]  # 之前的加上现在的就是最后的分数
        ans = 0
        for i in range(len(a)):
            ans = max(ans, dfs(i))
        return ans
```

# 718 Code

> 此代码通不过，需要改成dp才能通过，但此处仅是为了让大家学会写序列记忆化搜索，改dp很容易。

* []

```Python
class Solution:
    def findLength(self, s: List[int], t: List[int]) -> int:
        # 爆内存error
        m = len(s)
        n = len(t)
        @cache
        def dfs(i,j):
            if i < 0 or j < 0:
                return 0
            if s[i] == t[j]:  # 如果当前值相等，说明长度比原来多1 ，那么合并前一个结果+1就是当前的答案
                return 1 + dfs(i-1,j-1)
            return 0  # 如果 s[i] != t[j] ，不管以前如何，当前以i,j为结尾的子数组长度肯定为0，因为必须连续
        ans = 0
        for i in range(m):
            for j in range(n):
                ans = max(ans,dfs(i,j)) 
        return ans
```

# 368 Code

* []

```Python
class Solution:
    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:
        nums.sort()
        @cache
        def dfs(i):
            res = [nums[i]]
            for j in range(i):
                if nums[i] % nums[j] == 0:
                    tmp = [nums[i]]+dfs(j)
                    if len(tmp) > len(res):
                        res = tmp
            return res
        l,ans = 0, None
        for i in range(len(nums)):
            tmp = dfs(i)
            if len(tmp)>l:
                ans = tmp
                l = len(tmp)
        return ans
```

