## 最长上升子序列（贪心 + 二分）

题目要我们判断是否存在长度为 $3$ 的上升子序列，问题可以转换为求 $nums$ 的最长上升子序列（`LIS` 问题）的长度。

如果 $nums$ 的最长上升子序列长度大于等于 $3$，那么原问题答案为 `True`，否则为 `False`。

而求最长上升子序列的最优解是有基于「贪心 + 二分」的 $O(n\log{n})$ 做法，对此不了解的同学，可以先看前置 🧀 ：[LCS 问题与 LIS 问题的相互关系，以及 LIS 问题的最优解证明](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247487814&idx=1&sn=e33023c2d474ff75af83eda1c4d01892&chksm=fd9cba59caeb334f1fbfa1aefd3d9b2ab6abfccfcab8cb1dbff93191ae9b787e1b4681bbbde3&token=252055586&lang=zh_CN#rd)，里面详细讲解了 `LIS` 的贪心解证明，以及与最长公共子序列（`LCS` 问题）的相互关系，本次不再赘述。

**简单来说，就是在遍历每个数 $nums[i]$ 的同时，维护一个具有单调性的 $f[]$ 数组，其中 $f[len] = x$ 代表长度为 $len$ 的最长上升子序列最小结尾元素为 $x$，可以证明 $f$ 数组具有单调性（看 [前置🧀](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247487814&idx=1&sn=e33023c2d474ff75af83eda1c4d01892&chksm=fd9cba59caeb334f1fbfa1aefd3d9b2ab6abfccfcab8cb1dbff93191ae9b787e1b4681bbbde3&token=252055586&lang=zh_CN#rd)），因此每次可以通过二分找到小于 $nums[i]$ 的最大下标，来作为 $nums[i]$ 的前一个数。**

综上，我们使用 `LIS` 的「贪心 + 二分」做法求得最长上升子序列的最大长度，然后和 $3$ 比较即可得出答案。

**代码（感谢 [@🍭可乐可乐吗QAQ](/u/littletime_cc/) 同学提供的其他语言版本）：**

* []

```Java
class Solution {
    public boolean increasingTriplet(int[] nums) {
        int n = nums.length, ans = 1;
        int[] f = new int[n + 1];
        Arrays.fill(f, 0x3f3f3f3f);
        for (int i = 0; i < n; i++) {
            int t = nums[i];
            int l = 1, r = i + 1;
            while (l < r) {
                int mid = l + r >> 1;
                if (f[mid] >= t) r = mid;
                else l = mid + 1;
            }
            f[r] = t;
            ans = Math.max(ans, r);
        }
        return ans >= 3;
    }
}
```

* []

```C++
class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        int n = nums.size(), ans = 1;
        vector<int> f(n + 1, INT_MAX);
        for(int i = 0; i < n; i++){
            int t = nums[i];
            int L = 1, R = i + 1;
            while(L < R){
                int mid = L + R >> 1;
                if(f[mid] >= t) R = mid;
                else L = mid + 1;
            }
            f[R] = t;
            ans = max(ans, R);
        }
        return ans >= 3;
    }
};
```

* 时间复杂度：$O(n\log{n})$
* 空间复杂度：$O(n)$

---

## 优化 : 定长上升子序列（贪心）

利用本题只需要我们判定是否存在长度为 $3$ 的上升子序列，而不需要回答 `LIS` 最大长度。

我们可以对 $f$ 数组进行优化：**使用有限变量进行替换（将 $f$ 数组的长度压缩为 $2$），数组含义不变，$f[1] = x$ 代表长度为 $1$ 的上升子序列最小结尾元素为 $x$，$f[2] = y$ 代表长度为 $2$ 的上升子序列的最小结尾元素为 $y$。**

**从前往后扫描每个 $nums[i]$，每次将 $nums[i]$ 分别与 $f[1]$ 和 $f[2]$ 进行比较，如果能够满足 $nums[i] > f[2]$，代表 $nums[i]$ 能够接在长度为 $2$ 的上升子序列的后面，直接返回 `True`，否则尝试使用 $nums[i]$ 来更新 $f[1]$ 和 $f[2]。$**

这样，我们只使用了有限变量，每次处理 $nums[i]$ 只需要和有限变量进行比较，时间复杂度为 $O(n)$，空间复杂度为 $O(1)$。

**代码（感谢 [@🍭可乐可乐吗QAQ](/u/littletime_cc/) 和 [@Benhao](/u/himymben/) 同学提供的其他语言版本）：**

* []

```Java
class Solution {
    public boolean increasingTriplet(int[] nums) {
        int n = nums.length;
        long[] f = new long[3];
        f[1] = f[2] = (int)1e19;
        for (int i = 0; i < n; i++) {
            int t = nums[i];
            if (f[2] < t) return true;
            else if (f[1] < t && t < f[2]) f[2] = t;
            else if (f[1] > t) f[1] = t;
        }
        return false;
    }
}
```

* []

```Python
class Solution:
    def increasingTriplet(self, nums: List[int]) -> bool:
        n = len(nums)
        f = [inf] * 3
        for i in range(n):
            t = nums[i]
            if f[2] < t:
                return True
            elif f[1] < t < f[2]:
                f[2] = t
            elif f[1] > t:
                f[1] = t
        return False
```

* []

```Go
func increasingTriplet(nums []int) bool {
    n := len(nums)
    f := []int{math.MaxInt32,math.MaxInt32,math.MaxInt32}
    for i := 0; i < n; i++ {
        t := nums[i]
        if f[2] < t{
            return true
        } else if f[1] < t && t < f[2]{
            f[2] = t
        } else if f[1] > t {
            f[1] = t
        }
    }
    return false
}
```

* []

```C++
class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        int n = nums.size();
        vector<int> f(3, INT_MAX);
        for(int i = 0; i < n; i++){
            int t = nums[i];
            if(f[2] < t) return true;
            else if(f[1] < t and t < f[2]) f[2] = t;
            else if(f[1] > t) f[1] = t;
        }
        return false;
    }
};
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png)（公主号后台回复「送书」即可参与长期看题解学算法送实体书活动）或 加入[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
