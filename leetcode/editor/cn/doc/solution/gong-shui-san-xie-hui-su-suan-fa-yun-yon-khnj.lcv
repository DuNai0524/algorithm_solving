## 回溯算法

和 [131. 分割回文串](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247487047&idx=1&sn=117c48f20778868442fce44e100d2ea8) 一样，同样是一道求所有方案的题目，只能是没有太多优化的「爆搜」做法。

设计递归函数为 `void dfs(int idx, int n, List<Integer> cur)`，其中 `idx` 和 `n` 分别代表当前处理字符串 `s` 的哪个位置，以及字符串 `s` 的总长度，而 `cur` 的则是代表子串 $s[0 ... (idx - 1)]$ 部分的具体划分方案。

用题目样例 `s = "25525511135"` 作为 🌰，`n` 固定为 `11`，当 `idx = 3` 时，`cur` 为 $s[0...2] = 255$  部分的划分方案，`cur` 可能是 `[2,5,5]`、`[2,55]`、`[25,5]`、`[255]` 之一，在 `cur` 的基础上，我们继续爆搜剩余部分，即递归执行 `dfs(idx, n, cur)`，算法会将剩余部分的划分方案添加到 `cur` 上，我们只需要确保每次追加到 `cur` 的数值符合要求即可（没有前导零 且 范围在 $[0, 255]$ 中）。

在单次回溯过程中，我们可以将 `idx` 作为当前划分数字的左端点，通过枚举的形式找到右端点 `j`，并将当前数字 $s[idx ... (j - 1)]$ 加到 `cur` 中（若合法），回溯到底后再添加到 `cur` 的元素进行移除。

当 `idx = n` 代表整个 `s` 已经处理完成，若此时 `cur` 恰好有 $4$ 个元素，说明我们找到了一组合法方案，将其拼接成字符串追加到答案数组中。同时也是由于划分过程中 `cur` 最多只有 $4$ 个元素，我们可以用此做简单剪枝。

代码：

* []

```Java
class Solution {
    List<String> ans = new ArrayList<>();
    char[] cs;
    public List<String> restoreIpAddresses(String s) {
        cs = s.toCharArray();
        dfs(0, cs.length, new ArrayList<>());
        return ans;
    }
    void dfs(int idx, int n, List<Integer> cur) {
        if (cur.size() > 4) return ;
        if (idx == n) {
            if (cur.size() == 4) {
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < 4; i++) sb.append(cur.get(i)).append(".");
                ans.add(sb.substring(0, sb.length() - 1));
            }
        } else {
            for (int i = idx; i < n; i++) {
                int t = 0;
                for (int j = idx; j <= i; j++) t = t * 10 + (cs[j] - '0');
                if (cs[idx] == '0' && i != idx) break;
                if (t > 255) break;
                cur.add(t);
                dfs(i + 1, n, cur);
                cur.remove(cur.size() - 1);
            }
        }
    }
}
```

* []

```Python
class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        ans = []
        def dfs(idx, n, cur):
            if len(cur) > 4:
                return 
            if idx == n:
                if len(cur) == 4:
                    ans.append('.'.join(cur))
            else:
                for i in range(idx, n):
                    t = 0
                    for j in range(idx, i + 1):
                        t = t * 10 + (ord(s[j]) - ord('0'))
                    if s[idx] == '0' and i != idx:
                        break
                    if t > 255:
                        break
                    cur.append(str(t))
                    dfs(i + 1, n, cur)
                    cur.pop()
        dfs(0, len(s), [])
        return ans
```

* []

```TypeScript
function restoreIpAddresses(s: string): string[] {
    const ans = new Array<string>()
    function dfs(idx: number, n: number, cur: Array<number>): void {
        if (cur.length > 4) return 
        if (idx == n) {
            if (cur.length == 4) {
                let str = ''
                for (let i = 0; i < 4; i++) str += cur[i] + "."
                ans.push(str.substring(0, str.length - 1))
            }
        } else {
            for (let i = idx; i < n; i++) {
                let t = 0
                for (let j = idx; j <= i; j++) t = t * 10 + (s.charCodeAt(j) - '0'.charCodeAt(0))
                if (s[idx] == '0' && i != idx) break
                if (t > 255) break
                cur.push(t)
                dfs(i + 1, n, cur)
                cur.pop()
            }
        }
    }
    dfs(0, s.length, new Array<number>())
    return ans
}
```

* 时间复杂度：爆搜不讨论时空复杂度
* 空间复杂度：爆搜不讨论时空复杂度

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~

