> Problem: [526. 优美的排列](https://leetcode.cn/problems/beautiful-arrangement/description/)

[TOC]

# 思路

> 设置全局变量ret记录符合题意的值。经典的回溯题，使用pos来记录下标，再通过一个bool类型的数组来记录对应位置是否使用过，接着开始进行递归回溯操作。根据题意：下标从1开始到n，我们可以用一个循环来表示perm[i]，而前边说道的pos则是表示下标i，通过循环让这两个进行匹配，看是否符合要求，符合要求则让used=true，表示该位置使用过，后续进行递归，重复上述操作，递归完成后需要“恢复现场”（回溯）。函数出口为pos>n的时候。如下为笔者随手画的决策树：

# 配图

![pos.jpg](https://pic.leetcode.cn/1709091677-LGYbgJ-pos.jpg)

# Code

* []

```C++
class Solution {
    int ret = 0;

public:
    int countArrangement(int n) {
        vector<bool> used(n + 1, 0);
        dfs(n, 1, used);
        return ret;
    }
    void dfs(int n, int pos, vector<bool>& used) {
        // exit
        if (pos > n) {
            ret++;
            return;
        }

        for (int i = 1; i <= n; i++) {
            if (used[i] == false && (i % pos == 0 || pos % i == 0)) {
                used[i] = true;
                dfs(n, pos + 1, used);
                used[i] = false;//trackback
            }
        }
    }
};
```

