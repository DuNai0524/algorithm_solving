# 解法

## 思路和算法

由于每轮只能完成 $2$ 个或 $3$ 个相同难度级别的任务，因此为了完成所有任务，对于每个难度级别的任务需要分别将该难度级别的任务全部完成。为了使轮数最少，需要使每个难度级别的任务的轮数最少，因此需要计算每个难度级别的任务数。

首先遍历数组 $\textit{tasks}$ 统计每个难度级别的出现次数并存入哈希表，然后遍历哈希表计算每个难度级别的最少轮数。

如果一个难度级别的出现次数是 $\textit{count}$，则计算最少轮数的方法如下。

- 如果 $\textit{count} = 1$，则由于每轮至少完成 $2$ 个相同难度级别的任务，因此无法完成所有任务，返回 $-1$。

- 如果 $2 \le \textit{count} \le 3$，则可以在 $1$ 轮中完成该难度级别的所有任务。

- 如果 $\textit{count} = 4$，则可以在 $2$ 轮中完成该难度级别的所有任务，每一轮完成 $2$ 个任务。

- 如果 $5 \le \textit{count} \le 6$，则可以在 $2$ 轮中完成该难度级别的所有任务，一轮完成 $3$ 个任务，另一轮完成 $2$ 个任务或 $3$ 个任务。

- 如果 $\textit{count} \ge 7$，则可以使用贪心策略计算最少轮数。根据贪心策略，为了使轮数最少，应优先考虑完成 $3$ 个任务，如果完成 $3$ 个任务不可行再考虑完成 $2$ 个任务。具体考虑如下情况。
  - 如果 $\textit{count} \bmod 3 = 0$，则可以在 $\dfrac{\textit{count}}{3}$ 轮中各完成 $3$ 个任务，不可能使轮数更少。

  - 如果 $\textit{count} \bmod 3 = 1$，则可以在 $\dfrac{\textit{count} - 4}{3}$ 轮中各完成 $3$ 个任务，在 $2$ 轮中各完成 $2$ 个任务，不可能使轮数更少。

  - 如果 $\textit{count} \bmod 3 = 2$，则可以在 $\dfrac{\textit{count} - 2}{3}$ 轮中各完成 $3$ 个任务，在 $1$ 轮中完成 $2$ 个任务，不可能使轮数更少。

由于轮数不可能小于使用贪心策略计算得到的最少轮数，因此使用贪心策略可以得到最少轮数。

当一个难度级别的出现次数满足 $\textit{count} > 1$ 时，该难度级别的最少轮数可以表示成 $\Big\lceil \dfrac{\textit{count}}{3} \Big\rceil = \Big\lfloor 
\dfrac{\textit{count} + 2}{3} \Big\rfloor$。

## 代码

* [sol1-Java]

```Java
class Solution {
    public int minimumRounds(int[] tasks) {
        int rounds = 0;
        Map<Integer, Integer> counts = new HashMap<Integer, Integer>();
        for (int task : tasks) {
            counts.put(task, counts.getOrDefault(task, 0) + 1);
        }
        Set<Map.Entry<Integer, Integer>> entries = counts.entrySet();
        for (Map.Entry<Integer, Integer> entry : entries) {
            int count = entry.getValue();
            if (count == 1) {
                return -1;
            }
            rounds += (count + 2) / 3;
        }
        return rounds;
    }
}
```

* [sol1-C#]

```C#
public class Solution {
    public int MinimumRounds(int[] tasks) {
        int rounds = 0;
        IDictionary<int, int> counts = new Dictionary<int, int>();
        foreach (int task in tasks) {
            counts.TryAdd(task, 0);
            counts[task]++;
        }
        foreach (KeyValuePair<int, int> pair in counts) {
            int count = pair.Value;
            if (count == 1) {
                return -1;
            }
            rounds += (count + 2) / 3;
        }
        return rounds;
    }
}
```

## 复杂度分析

- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\textit{tasks}$ 的长度。需要遍历数组得到每个难度级别的出现次数并存入哈希表，然后遍历哈希表计算最少轮数。

- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\textit{tasks}$ 的长度。哈希表的空间是 $O(n)$。

