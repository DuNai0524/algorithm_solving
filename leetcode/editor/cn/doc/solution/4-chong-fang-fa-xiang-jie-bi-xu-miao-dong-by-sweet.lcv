### 合并 K 个有序链表

---

### 一、K 指针：K 个指针分别指向 K 条链表

#### 1. 每次 $O(K)$ 比较 K个指针求 min, 时间复杂度：$O(NK)$

* []

```Java
class Solution {
    public ListNode mergeKLists(ListNode[] lists) { 
        int k = lists.length;
        ListNode dummyHead = new ListNode(0);
        ListNode tail = dummyHead;
        while (true) {
            ListNode minNode = null;
            int minPointer = -1;
            for (int i = 0; i < k; i++) {
                if (lists[i] == null) {
                    continue;
                }
                if (minNode == null || lists[i].val < minNode.val) {
                    minNode = lists[i];
                    minPointer = i;
                }
            }
            if (minPointer == -1) {
                break;
            }
            tail.next = minNode;
            tail = tail.next;
            lists[minPointer] = lists[minPointer].next;
        }
        return dummyHead.next;
    }
}
```

#### 2. 使用小根堆对 1 进行优化，每次 $O(logK)$ 比较 K个指针求 min, 时间复杂度：$O(NlogK)$

* []

```Java
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        Queue<ListNode> pq = new PriorityQueue<>((v1, v2) -> v1.val - v2.val);
        for (ListNode node: lists) {
            if (node != null) {
                pq.offer(node);
            }
        }

        ListNode dummyHead = new ListNode(0);
        ListNode tail = dummyHead;
        while (!pq.isEmpty()) {
            ListNode minNode = pq.poll();
            tail.next = minNode;
            tail = minNode;
            if (minNode.next != null) {
                pq.offer(minNode.next);
            }
        }

        return dummyHead.next;
    }
}
```

### 二、 逐一合并两条链表

首先复习一下 「[21. 合并两个有序链表](https://leetcode-cn.com/problems/merge-two-sorted-lists/)」
下面分别贴出「merge2Lists」的「递归」 和 「迭代」两种实现 ：

合并两条有序链表 — 递归

* []

```Java
private ListNode merge2Lists(ListNode l1, ListNode l2) {
    if (l1 == null) {
        return l2;
    }
    if (l2 == null) {
        return l1;
    }
    if (l1.val < l2.val) {
        l1.next = merge2Lists(l1.next, l2);
        return l1;
    }
    l2.next = merge2Lists(l1, l2.next);
    return l2;
}
```

合并两条有序链表 — 迭代

* []

```Java
private ListNode merge2Lists(ListNode l1, ListNode l2) {
    ListNode dummyHead = new ListNode(0);
    ListNode tail = dummyHead;
    while (l1 != null && l2 != null) {
        if (l1.val < l2.val) {
            tail.next = l1;
            l1 = l1.next;
        } else {
            tail.next = l2;
            l2 = l2.next;
        }
        tail = tail.next;
    }

    tail.next = l1 == null? l2: l1;

    return dummyHead.next;
}
```

#### 1. 逐一合并两条链表, 时间复杂度：$O(NK)$

* []

```Java
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode res = null;
        for (ListNode list: lists) {
            res = merge2Lists(res, list);
        }
        return res;
    }
}
```

#### 2. 两两合并对 1 进行优化，时间复杂度：$O(NlogK)$

时间复杂度分析：$K$ 条链表的总结点数是 $N$，平均每条链表有 $N/K$ 个节点，因此合并两条链表的时间复杂度是 $O(N/K)$。从 $K$ 条链表开始两两合并成 $1$ 条链表，因此每条链表都会被合并 $logK$ 次，因此 $K$ 条链表会被合并 $K * logK$ 次，因此总共的时间复杂度是 $K*logK*N/K$ 即 $O（NlogK）$。

下面分别贴出「两两合并」的「递归」 和 「迭代」两种实现 ：

两两合并 - 迭代

* []

```Java
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0) {
            return null;
        }
        int k = lists.length;
        while (k > 1) {
            int idx = 0;
            for (int i = 0; i < k; i += 2) {
                if (i == k - 1) {
                    lists[idx++] = lists[i];
                } else {
                    lists[idx++] = merge2Lists(lists[i], lists[i + 1]);
                }
            }
            k = idx;
        }
        return lists[0];
    }
}
```

两两合并 - 递归

* []

```Java
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0) {
            return null;
        }
        return merge(lists, 0, lists.length - 1);
    }

    private ListNode merge(ListNode[] lists, int lo, int hi) {
        if (lo == hi) {
            return lists[lo];
        }
        int mid = lo + (hi - lo) / 2;
        ListNode l1 = merge(lists, lo, mid);
        ListNode l2 = merge(lists, mid + 1, hi);
        return merge2Lists(l1, l2);
    }
}
```

### 三、总结

掌握两种 $O(NlogK)$ 方法：

1. K 指针指向 K 条链表，每次使用小根堆来 logK 求出最小值；
2. 对 K 条链表进行两两合并（递归 / 迭代）。

▄█▔▉● 大佬们随手 ➡️ [关注我](https://leetcode-cn.com/u/sweetiee/)

