# 思路

首先如果字符串长度为**奇数**，则字符串**中间**的那个字符无论怎么改，字符串都是回文串。
如：`aba`，`b`字符无论怎么改，字符串都还是**回文串**。

回文串**前半段**和**后半段**是**相互对应**的，因此只要遍历一半就好了。

首先遍历前半段，遇到不为`a`的字符就直接将其替换成`a`，然后直接return结果。
如果前半段都是`a`，则说明后半段也都是`a`，说明字符串要么类似`aabaa`，要么类似`aaaaaa`。
直接将最后1个字符改成`b`就好了。

# 代码

* [-java代码]

```java
class Solution {
    public String breakPalindrome(String palindrome) {
        int len = palindrome.length(), half = (len - 2) >> 1;
        if (len < 2) return "";
        char[] ch_arr = palindrome.toCharArray();
        for (int i = 0; i <= half; ++i)
            if (ch_arr[i] > 'a') {
                ch_arr[i] = 'a';
                return String.valueOf(ch_arr);
            }
        ch_arr[len - 1] = 'b';
        return String.valueOf(ch_arr);
    }
}
```

* [-c++代码]

```c++
class Solution {
public:
    string breakPalindrome(string palindrome) {
        size_t len = palindrome.size(), half = (len - 2) >> 1;
        if(len < 2) return "";
        for (size_t i = 0; i <= half; ++i)
            if (palindrome[i] > 'a') {
                palindrome[i] = 'a';
                return palindrome;
            }
        palindrome[len - 1] = 'b';
        return palindrome;
    }
};
```

* [-python3代码]

```python
class Solution:
    def breakPalindrome(self, palindrome: str) -> str:
        str_len = len(palindrome)
        if str_len < 2:
            return ""
        for idx in range(str_len >> 1):
            if palindrome[idx] > 'a':
                return palindrome[:idx] + 'a' + palindrome[idx+1:]
        return palindrome[:str_len-1] + 'b'
        # str_len = len(palindrome)
        # char_list = list(palindrome)
        # for idx in range(str_len >> 1):
        #     if char_list[idx] > 'a':
        #         char_list[idx] = 'a'
        #         return ''.join(char_list)
        # char_list[str_len - 1] = 'b'
        # return ''.join(char_list)
```

