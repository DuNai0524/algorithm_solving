# 解法

## 思路和算法

由于整数 $n$ 的每一位数字与数字 $x$ 都不等于 $0$，因此不需要考虑前导零的问题，整数 $n$ 一定是正整数或负整数。由于插入 $x$ 不会改变 $n$ 的正负性，为了使插入 $x$ 后的 $n$ 的值最大化，当 $n$ 是正整数时应使 $n$ 的绝对值最大化，当 $n$ 是负整数时应使 $n$ 的绝对值最小化。

当数字 $x$ 插入到数字 $y$ 的相邻位置时，考虑将数字 $x$ 插入到数字 $y$ 的前面和数字 $y$ 的后面的两种情况。

- 当 $x > y$ 时，将数字 $x$ 插入到数字 $y$ 的前面得到的整数 $n$ 的绝对值大于将数字 $x$ 插入到数字 $y$ 的后面得到的整数 $n$ 的绝对值。

- 当 $x < y$ 时，将数字 $x$ 插入到数字 $y$ 的前面得到的整数 $n$ 的绝对值小于将数字 $x$ 插入到数字 $y$ 的后面得到的整数 $n$ 的绝对值。

- 当 $x = y$ 时，两种情况得到的整数 $n$ 的绝对值相等。

因此当 $n$ 是正整数时应将 $x$ 插入到一个小于 $x$ 的数字的前面相邻位置，当 $n$ 是负整数时应将 $x$ 插入到一个大于 $x$ 的数字的前面相邻位置。

由于在高位插入值对于绝对值的影响更大，因此为了使 $n$ 的绝对值最大化或最小化，应选择符合要求的最高位插入 $x$。如果不存在符合要求的数字，则将 $x$ 添加到整数 $n$ 的末尾。

上述做法为贪心策略，由于不遵循贪心策略一定不可能得到更大的整数，因此遵循贪心策略可以得到最大值。

具体做法是，首先判断整数 $n$ 的正负性，然后从左到右遍历整数 $n$ 的每一位寻找插入 $x$ 的位置，如果整数 $n$ 中不存在符合要求的数字则插入 $x$ 的位置为整数 $n$ 的末尾，将 $x$ 插入之后即可得到整数 $n$ 的最大值。

## 代码

* [sol1-Java]

```Java
class Solution {
    public String maxValue(String n, int x) {
        return maxValue(n, (char) (x + '0'), Character.isDigit(n.charAt(0)));
    }

    public String maxValue(String n, char x, boolean positive) {
        StringBuffer sb = new StringBuffer(n);
        int length = n.length();
        int insertIndex = length;
        for (int i = 0; i < length && insertIndex == length; i++) {
            if ((positive && x > n.charAt(i)) || (!positive && x < n.charAt(i))) {
                insertIndex = i;
            }
        }
        sb.insert(insertIndex, x);
        return sb.toString();
    }
}
```

* [sol1-C#]

```C#
public class Solution {
    public string MaxValue(string n, int x) {
        return MaxValue(n, (char) (x + '0'), char.IsDigit(n[0]));
    }

    public string MaxValue(string n, char x, bool positive) {
        StringBuilder sb = new StringBuilder(n);
        int length = n.Length;
        int insertIndex = length;
        for (int i = 0; i < length && insertIndex == length; i++) {
            if ((positive && x > n[i]) || (!positive && x < n[i])) {
                insertIndex = i;
            }
        }
        sb.Insert(insertIndex, x);
        return sb.ToString();
    }
}
```

## 复杂度分析

- 时间复杂度：$O(\log_{10} |n|)$，其中 $n$ 是给定的整数。整数 $n$ 的长度是 $O(\log_{10} |n|)$，需要遍历整数 $n$ 一次寻找插入 $x$ 位置，然后生成插入 $x$ 之后的整数。

- 空间复杂度：$O(\log_{10} |n|)$，其中 $n$ 是给定的整数。插入 $x$ 之后的整数字符串的空间是 $O(\log_{10} |n|)$。由于 Java 中的 $\texttt{String}$ 类型的对象和 C# 中的 $\texttt{string}$ 类型的对象不可变，因此空间复杂度至少为 $O(\log_{10} |n|)$。

